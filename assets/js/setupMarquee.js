(function ($, _) {
  ("use strict");

  const setupMarquee = (scope, widgetPrefix) => {
    let marqueeContainer = $(scope).find(`.${widgetPrefix}-marquee`);
    let marqueeGroup = $(scope).find(`.${widgetPrefix}-marquee-group`);

    // Determine orientation
    let isVertical =
      marqueeContainer.hasClass(`deensimc-marquee-vertical`) ||
      $(scope).find(`.deensimc-wrapper-vertical`).length > 0;
    // Fallback if specific class isn't on marqueeContainer itself: check the parent wrapper generated by your PHP
    if (!isVertical) {
      isVertical = marqueeContainer
        .closest(".deensimc-wrapper")
        .hasClass("deensimc-wrapper-vertical");
    }

    let isAnimationEnabled = marqueeContainer.data("animation-status") || "yes";
    let isPausedOnHover = marqueeContainer.data("pause-on-hover") || "no";
    let isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);

    let originalChildElements = marqueeGroup.children().clone(true, true);

    marqueeGroup.empty();
    originalChildElements.each(function () {
      marqueeGroup.append($(this));
    });
    originalChildElements.each(function () {
      marqueeGroup.append($(this).clone(true, true));
    });

    let originalContentSize = 0;
    const originalChildElementsArray = Array.from(originalChildElements);
    originalContentSize = originalChildElementsArray.reduce(
      (accumulator, currentElement) => {
        let aspect = currentElement.clientWidth + currentElement.clientHeight;
        return accumulator + aspect;
      },
      0
    );

    if (isVertical) {
      // Vertical
      originalChildElements.each(function () {
        // Temporarily ensure the item is block to measure height correctly if it was display:none
        let $item = $(this);
        let originalDisplay = $item.css("display");
        if (originalDisplay === "none") {
          $item.css({ display: "block", visibility: "hidden" });
        }
        originalContentSize += $item.outerHeight(true);
        if (originalDisplay === "none") {
          $item.css({ display: originalDisplay, visibility: "" });
        }
      });
    } else {
      // Horizontal
      originalChildElements.each(function () {
        let $item = $(this);
        let originalDisplay = $item.css("display");
        // For horizontal, items are typically inline-block or flex items.
        if (originalDisplay === "none") {
          $item.css({ display: "inline-block", visibility: "hidden" });
        }
        originalContentSize += $item.outerWidth(true);
        if (originalDisplay === "none") {
          $item.css({ display: originalDisplay, visibility: "" });
        }
      });
    }

    if (originalContentSize === 0) {
      marqueeGroup.addClass(`${widgetPrefix}-paused`);
      console.warn(
        `Marquee original content ${
          isVertical ? "height" : "width"
        } is 0. Animation paused.`
      );
      return;
    }

    let pixelsPerSecondSetting = marqueeContainer.data("animation-speed");
    let pixelsPerSecond = 50;

    if (typeof pixelsPerSecondSetting !== "undefined") {
      const parsedSpeed = parseFloat(pixelsPerSecondSetting);
      if (!isNaN(parsedSpeed) && parsedSpeed > 0) {
        pixelsPerSecond = parsedSpeed;
      } else {
        console.warn(
          `Invalid data-animation-speed value: ${pixelsPerSecondSetting}. Using default ${pixelsPerSecond}px/s.`
        );
      }
    }

    if (pixelsPerSecond <= 0) {
      marqueeGroup.addClass(`${widgetPrefix}-paused`);
      console.warn("Marquee speed is 0 or negative. Animation paused.");
      return;
    }

    let animationDuration = originalContentSize / pixelsPerSecond;

    if (isSafari && Math.abs(animationDuration - 3) < 0.01) {
      animationDuration += 0.01;
    }

    marqueeGroup.css("animation-duration", animationDuration + "s");

    // Ensure correct animation name is applied based on orientation if not already handled by more specific CSS
    handlePauseOnHover(marqueeGroup, isPausedOnHover);

    if (isAnimationEnabled === "yes") {
      marqueeGroup.css("animation-play-state", "running");
    } else {
      marqueeGroup.css("animation-play-state", "paused");
    }

    if (
      isAnimationEnabled === "yes" &&
      originalContentSize > 0 &&
      pixelsPerSecond > 0
    ) {
      marqueeGroup.removeClass(`${widgetPrefix}-paused`);
    }
  };
  window.setupMarquee = setupMarquee;
})(jQuery, window._);
